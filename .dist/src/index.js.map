{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"AACA,YAAY,CAAC;;AACb,uDAAsC;AACtC,sDAAsD;AACtD,yCAAyC;AAKzC,eAAuB,SAAQ,OAAO,CAAC,KAAK,CAAC,SAAwC;IAGjF;QACI,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IAC1B,CAAC;IACS,WAAW,CAAC,SAAuH;QACzI,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,QAAgC,EAAE,QAAQ,EAAE,EAAE;YAClF,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC,IAAI,CAAC;YAChC,IAAI,CAAC,QAAQ,EAAE,CAAC;QACpB,CAAC,CAAC,CAAC;QACH,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,EAAE,CAAC,QAA2C,EAAE,QAAQ,EAAE,EAAE;YACzG,IAAI,aAAa,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;YACpD,IAAI,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;YAC5C,IAAI,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;YAChC,qBAAE,CAAC,UAAU,CAAC,YAAY,CAAC,aAAa,EAAC,MAAM,EAAE,QAAQ,EAAE,CAAC,GAAU,EAAE,EAAE;gBACtE,EAAE,CAAC,CAAC,GAAG,CAAC;oBAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;YAC/B,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAA;QACF;;;;WAIG;IACP,CAAC;IACO,QAAQ;QAEZ;;;;WAIG;QAEH;;;aAGK;QACL,IAAI,CAAC,IAAI,CAAC,IAAI,gBAAgB,CAAC,KAAK,CAAC,QAAQ,CAAC,sBAAsB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;IAClH,CAAC;;AArCsB,cAAI,GAAG,6BAA6B,CAAA;AAD/D,8BAuCC;AAED,IAAiB,SAAS,CAkCzB;AAlCD,WAAiB,SAAS;IACtB,IAAiB,QAAQ,CA0BxB;IA1BD,WAAiB,QAAQ;QAIrB,SAAiB,SAAQ,OAAO,CAAC,UAAsB;YAGnD;;;;eAIG;YAEH,YAAY,EAAU,EAAE,IAAgB;gBACpC,KAAK,CAAC,IAAI,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;YAClD,CAAC;;QAVsB,QAAI,GAAG,SAAS,CAAC,IAAI,GAAG,MAAM,CAAC;QAD7C,YAAG,MAYf,CAAA;QAID,qBAA6B,SAAQ,OAAO,CAAC,UAAkC;YAE3E,YAAY,OAA+B,EAAE,EAAU;gBACnD,KAAK,CAAC,IAAI,OAAO,CAAC,MAAM,CAAC,eAAe,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;YACjE,CAAC;;QAHsB,oBAAI,GAAG,iBAAiB,CAAC;QADvC,wBAAe,kBAK3B,CAAA;IACL,CAAC,EA1BgB,QAAQ,GAAR,kBAAQ,KAAR,kBAAQ,QA0BxB;AAOL,CAAC,EAlCgB,SAAS,GAAT,iBAAS,KAAT,iBAAS,QAkCzB","file":"index.js","sourcesContent":["\n\"use strict\";\nimport { io } from \"cessnalib.nodejs\";\nimport * as euglena_template from \"@euglena/template\";\nimport * as euglena from \"@euglena/core\";\nimport { sys, js } from \"cessnalib\";\n\nimport Particle = euglena.AnyParticle;\n\nexport class Organelle extends euglena.alive.Organelle<particles.incoming.SapContent> {\n    public static readonly NAME = \"euglena.organelle.fs.nodejs\"\n    private sapContent: particles.incoming.SapContent;\n    constructor() {\n        super(Organelle.NAME);\n    }\n    protected bindActions(addAction: (particleName: string, action: (particle: Particle, callback: (particle: Particle) => void) => void) => void): void {\n        addAction(particles.incoming.Sap.NAME, (particle: particles.incoming.Sap, callback) => {\n            this.sapContent = particle.data;\n            this.getAlive();\n        });\n        addAction(particles.incoming.WriteBase64File.NAME, (particle:particles.incoming.WriteBase64File, callback) => {\n            let base64Content = particle.data.file.data.content;\n            let fileName = particle.data.file.data.name;\n            let folder = particle.data.path;\n            io.FileSystem.base64ToFile(base64Content,folder, fileName, (err: Error) => {\n                if (err) console.error(err)\n            });\n        })\n        /**\n         * TODO:\n         * Add Actions below in this method \"bindActions\" \n         * \n         */\n    }\n    private getAlive() {\n\n        /**\n         * TODO:\n         * Write something to make state of the organelle that\n         * organelle can take requests, and work.\n         */\n\n        /**\n         * send a notification to the Cytoplasm\n         * to inform about the organelle has been ready to get requests\n         * */\n        this.send(new euglena_template.alive.particle.OrganelleHasComeToLife(this.name, this.sapContent.euglenaName));\n    }\n}\n\nexport namespace particles {\n    export namespace incoming {\n        export interface SapContent {\n            euglenaName: string\n        }\n        export class Sap extends euglena.ParticleV2<SapContent>{\n            public static readonly NAME = Organelle.NAME + \".sap\";\n\n            /**\n             *  TODO:\n             * Add fields needed from outside\n             * before started the organelle working\n             */\n\n            constructor(of: string, data: SapContent) {\n                super(new euglena.MetaV2(Sap.NAME, of), data);\n            }\n        }\n\n        export interface WriteBase64FileContent { file: euglena_template.alive.particle.Base64File, path: string }\n\n        export class WriteBase64File extends euglena.ParticleV2<WriteBase64FileContent>{\n            public static readonly NAME = \"WriteBase64File\";\n            constructor(content: WriteBase64FileContent, of: string) {\n                super(new euglena.MetaV2(WriteBase64File.NAME, of), content);\n            }\n        }\n    }\n    export namespace outgoing {\n\n    }\n    export namespace shared {\n\n    }\n}\n"]}